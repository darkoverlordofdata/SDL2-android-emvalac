/**
 * Entitas Generated Entity & Components for shmupwarz
 *
 * do not edit this file
 */
namespace entitas {

	
	public struct Entity {			   	/* Core component: */  
		public int id;			   		/* sequentially assigned id# */
		public string name; 			/* display name */
		public int pool;			   	/* pool entities by type */
		public uint64mask;				/* hasComponent bit array */

		public Background? 	background; 
		public SDL.Video.Rect? bounds;
		public Bullet? 		bullet;		
		public Enemy1? 		enemy1;		
		public Enemy2? 		enemy2;		
		public Enemy3? 		enemy3;		
		public Expires? 	expires;		
		public Health? 		health;		
		public Hud? 		hud;			
		public Index? 		index; 
		public Layer? 		layer;		
		public Position? 	position;	
		public Scale? 		scale;
		// public Sound? 	sound;
		public Sprite? 		sprite;
		public Text? 		text;
		public Tint? 		tint;
		public Tween?		tween;
		public Velocity? 	velocity;

		public bool hasComponent(int index) {
			return (POW2[index] & mask) != 0;
		}

		public bool hasComponents(int[] indices) {
			foreach (var index in indices) 
				if ((POW2[index] & mask) == 0) return false;
			return true;
		}

		public bool hasAnyComponent(int[] indices) {
			foreach (var index in indices)
				if ((POW2[index] & mask) != 0) return true;
			return false;
		}

		public Entity* setId(int id) {
			this.id = id;
			return &this;
		}

		public Entity* setName(string name) {
			this.name = name;
			return &this;
		}

		public Entity* setActive(bool active) {
			if (((mask & ACTIVE) == ACTIVE ) == activ) return &this;
			if (active) mask |= ACTIVE;
			else mask ^= ACTIVE;
			return &this;
		}

		public Entity* setPool(int pool) {
			this.pool = pool;
			return &this;
		}

		public bool isActive() {
			return (mask & ACTIVE) == ACTIVE;
		}

		public string toString() {
			var sb = "";
			sb = sb + id.to_string() + "(" + name + ")";
			var seperator = false;
			for (var i = 1; i<=Components.COUNT; i++) {
				if (hasComponent(i)) {
					if (seperator) sb = sb + ", ";
					sb = sb + ComponentString[i];
					seperator = true;
				}
			}
			return sb;
		}

		/**
		 * Components:
		 */

		public Entity* setBackground(bool value) {
			if (value) {
				this.background = { true };
				mask |= BACKGROUND;
			} else {
				this.background = null;
				mask ^= BACKGROUND;
			}
			return &this;
		}

		public isBackground():bool
			if this.background == null do return false
			else do return true

		public hasBounds():bool
			return (mask & BOUNDS) != 0

		public addBounds(x:int,y:int,w:int,h:int):Entity* 
			if (mask & BOUNDS) != 0 do raise new Exception.EntityAlreadyHasComponent("Bounds")
			this.bounds = { x, y, w, h }
			mask |= BOUNDS
			World.onComponentAdded(&this, Components.BoundsComponent)
			return &this

		public setBounds(x:int,y:int,w:int,h:int):Entity*
			if (mask & BOUNDS) == 0 do raise new Exception.EntityDoesNotHaveComponent("Bounds")
			this.bounds.x = x
			this.bounds.y = y
			this.bounds.w = w
			this.bounds.h = h
			return &this

		public removeBounds():Entity*
			if (mask & BOUNDS) == 0 do raise new Exception.EntityDoesNotHaveComponent("Bounds")
			this.bounds = null
			mask ^= BOUNDS
			World.onComponentRemoved(&this, Components.BoundsComponent)
			return &this

		public setBullet(value:bool):Entity*
			if value
				this.bullet = { true }
				mask |= BULLET
				World.onComponentAdded(&this, Components.BulletComponent)
			else
				this.bullet = null
				mask ^= BULLET
				World.onComponentRemoved(&this, Components.BulletComponent)
			return &this

		public isBullet():bool
			return (mask & BULLET) != 0

		public setEnemy1(value:bool):Entity*
			if value
				this.enemy1 = { true }
				mask |= ENEMY1
				World.onComponentAdded(&this, Components.Enemy1Component)
			else
				this.enemy1 = null
				mask ^= ENEMY1
				World.onComponentRemoved(&this, Components.Enemy1Component)
			return &this

		public isEnemy1():bool
			return (mask & ENEMY1) != 0

		public setEnemy2(value:bool):Entity*
			if value
				this.enemy2 = { true }
				mask |= ENEMY2
				World.onComponentAdded(&this, Components.Enemy2Component)
			else
				this.enemy2 = null
				mask ^= ENEMY2
				World.onComponentRemoved(&this, Components.Enemy2Component)
			return &this

		public isEnemy2():bool
			return (mask & ENEMY2) != 0

		public setEnemy3(value:bool):Entity*
			if value
				this.enemy3 = { true }
				mask |= ENEMY3
				World.onComponentAdded(&this, Components.Enemy3Component)
			else
				this.enemy3 = null
				mask ^= ENEMY3
				World.onComponentRemoved(&this, Components.Enemy3Component)
			return &this

		public isEnemy3():bool
			return (mask & ENEMY3) != 0

		public hasExpires():bool
			return (mask & EXPIRES) != 0

		public addExpires(value:float):Entity* 
			if (mask & EXPIRES) != 0 do raise new Exception.EntityAlreadyHasComponent("Expires")
			this.expires = { value }
			mask |= EXPIRES
			World.onComponentAdded(&this, Components.ExpiresComponent)
			return &this

		public setExpires(value:float):Entity*
			if (mask & EXPIRES) == 0 do raise new Exception.EntityDoesNotHaveComponent("Expires")
			this.expires.value = value
			return &this

		public removeExpires():Entity*
			if (mask & EXPIRES) == 0 do raise new Exception.EntityDoesNotHaveComponent("Expires")
			this.expires = null
			mask ^= EXPIRES
			World.onComponentRemoved(&this, Components.ExpiresComponent)
			return &this

		public hasHealth():bool
			return (mask & HEALTH) != 0

		public addHealth(current:float,maximum:float):Entity* 
			if (mask & HEALTH) != 0 do raise new Exception.EntityAlreadyHasComponent("Health")
			this.health = { current, maximum }
			mask |= HEALTH
			World.onComponentAdded(&this, Components.HealthComponent)
			return &this

		public setHealth(current:float,maximum:float):Entity*
			if (mask & HEALTH) == 0 do raise new Exception.EntityDoesNotHaveComponent("Health")
			this.health.current = current
			this.health.maximum = maximum
			return &this

		public removeHealth():Entity*
			if (mask & HEALTH) == 0 do raise new Exception.EntityDoesNotHaveComponent("Health")
			this.health = null
			mask ^= HEALTH
			World.onComponentRemoved(&this, Components.HealthComponent)
			return &this

		public setHud(value:bool):Entity*
			if value
				this.hud = { true }
				mask |= HUD
				World.onComponentAdded(&this, Components.HudComponent)
			else
				this.hud = null
				mask ^= HUD
				World.onComponentRemoved(&this, Components.HudComponent)
			return &this

		public isHud():bool
			if this.hud == null do return false
			else do return true

		public hasIndex():bool
			return (mask & INDEX) != 0

		public addIndex(value:int, limit: int, vertical: bool):Entity* 
			if (mask & INDEX) != 0 do raise new Exception.EntityAlreadyHasComponent("Index")
			this.index = { value , limit, vertical }
			mask |= INDEX
			World.onComponentAdded(&this, Components.IndexComponent)
			return &this

		public setIndex(value:int, limit: int, vertical: bool):Entity*
			if (mask & INDEX) == 0 do raise new Exception.EntityDoesNotHaveComponent("Index")
			this.index.value = value
			this.index.limit = value
			this.index.vertical = vertical
			return &this

		public removeIndex():Entity*
			if (mask & INDEX) == 0 do raise new Exception.EntityDoesNotHaveComponent("Index")
			this.index = null
			mask ^= INDEX
			World.onComponentRemoved(&this, Components.IndexComponent)
			return &this

		public hasLayer():bool
			return (mask & LAYER) != 0

		public addLayer(value:int):Entity* 
			if (mask & LAYER) != 0 do raise new Exception.EntityAlreadyHasComponent("Layer")
			this.layer = { value }
			mask |= LAYER
			World.onComponentAdded(&this, Components.LayerComponent)
			return &this

		public setLayer(value:int):Entity*
			if (mask & LAYER) == 0 do raise new Exception.EntityDoesNotHaveComponent("Layer")
			this.layer.value = value
			return &this

		public removeLayer():Entity*
			if (mask & LAYER) == 0 do raise new Exception.EntityDoesNotHaveComponent("Layer")
			this.layer = null
			mask ^= LAYER
			World.onComponentRemoved(&this, Components.LayerComponent)
			return &this

		public hasPosition():bool
			return (mask & POSITION) != 0

		public addPosition(x:float,y:float):Entity* 
			if (mask & POSITION) != 0 do raise new Exception.EntityAlreadyHasComponent("Unable to add Position")
			this.position = { x, y }
			mask |= POSITION
			World.onComponentAdded(&this, Components.PositionComponent)
			return &this

		public setPosition(x:float,y:float):Entity*
			if (mask & POSITION) == 0 do raise new Exception.EntityDoesNotHaveComponent("Unable to set Position")
			this.position.x = x
			this.position.y = y
			return &this

		public removePosition():Entity*
			if (mask & POSITION) == 0 do raise new Exception.EntityDoesNotHaveComponent("Unable to remove Position")
			this.position = null
			mask ^= POSITION
			World.onComponentRemoved(&this, Components.PositionComponent)
			return &this

		public hasScale():bool
			return (mask & SCALE) != 0

		public addScale(x:float,y:float):Entity* 
			if (mask & SCALE) != 0 do raise new Exception.EntityAlreadyHasComponent("Scale")
			this.scale = { x, y }
			mask |= SCALE
			World.onComponentAdded(&this, Components.ScaleComponent)
			return &this

		public setScale(x:float,y:float):Entity*
			if (mask & SCALE) == 0 do raise new Exception.EntityDoesNotHaveComponent("Scale")
			this.scale.x = x
			this.scale.y = y
			return &this

		public removeScale():Entity*
			if (mask & SCALE) == 0 do raise new Exception.EntityDoesNotHaveComponent("Scale")
			this.scale = null
			mask ^= SCALE
			World.onComponentRemoved(&this, Components.ScaleComponent)
			return &this

		// public hasSound():bool
		// 	return (mask & SOUND) != 0

		// public addSound(sound:SDLMixer.Chunk):Entity* 
		// 	if (mask & SOUND) != 0 do raise new Exception.EntityAlreadyHasComponent("Sound")
		// 	this.sound = { sound }
		// 	mask |= SOUND
		// 	//World.onComponentAdded(&this, Components.SoundComponent)
		// 	return &this

		// public setSound(sound:SDLMixer.Chunk):Entity*
		// 	if (mask & SOUND) == 0 do raise new Exception.EntityDoesNotHaveComponent("Sound")
		// 	this.sound.sound = sound
		// 	return &this

		// public removeSound():Entity*
		// 	if (mask & SOUND) == 0 do raise new Exception.EntityDoesNotHaveComponent("Sound")
		// 	this.sound = null
		// 	mask ^= SOUND
		// 	//World.onComponentRemoved(&this, Components.SoundComponent)
		// 	return &this

		public hasSprite():bool
			return (mask & SPRITE) != 0

		public addSprite(sprite:sdx.graphics.Sprite, width: int, height: int):Entity* 
			if (mask & SPRITE) != 0 do raise new Exception.EntityAlreadyHasComponent("Sprite")
			this.sprite = { sprite, width, height }
			mask |= SPRITE
			World.onComponentAdded(&this, Components.SpriteComponent)
			return &this

		public setSprite(sprite:sdx.graphics.Sprite, width: int, height: int):Entity*
			if (mask & SPRITE) == 0 do raise new Exception.EntityDoesNotHaveComponent("Sprite")
			this.sprite.sprite = sprite
			this.sprite.width = width
			this.sprite.height = height
			return &this

		public removeSprite():Entity*
			if (mask & SPRITE) == 0 do raise new Exception.EntityDoesNotHaveComponent("Sprite")
			this.sprite = null
			mask ^= SPRITE
			World.onComponentRemoved(&this, Components.SpriteComponent)
			return &this

		public hasText():bool
			return (mask & TEXT) != 0

		public addText(text:string,texture:sdx.graphics.Sprite.TextSprite):Entity* 
			if (mask & TEXT) != 0 do raise new Exception.EntityAlreadyHasComponent("Text")
			this.text = { text, texture }
			mask |= TEXT
			World.onComponentAdded(&this, Components.TextComponent)
			return &this

		public setText(text:string,texture:sdx.graphics.Sprite.TextSprite):Entity*
			if (mask & TEXT) == 0 do raise new Exception.EntityDoesNotHaveComponent("Text")
			this.text.text = text
			this.text.sprite = texture
			return &this

		public removeText():Entity*
			if (mask & TEXT) == 0 do raise new Exception.EntityDoesNotHaveComponent("Text")
			this.text = null
			mask ^= TEXT
			World.onComponentRemoved(&this, Components.TextComponent)
			return &this

		public hasTint():bool
			return (mask & TINT) != 0

		public addTint(r:int,g:int,b:int,a:int):Entity* 
			if (mask & TINT) != 0 do raise new Exception.EntityAlreadyHasComponent("Tint")
			this.tint = { r, g, b, a }
			mask |= TINT
			World.onComponentAdded(&this, Components.TintComponent)
			return &this

		public setTint(r:int,g:int,b:int,a:int):Entity*
			if (mask & TINT) == 0 do raise new Exception.EntityDoesNotHaveComponent("Tint")
			this.tint.r = r
			this.tint.g = g
			this.tint.b = b
			this.tint.a = a
			return &this

		public removeTint():Entity*
			if (mask & TINT) == 0 do raise new Exception.EntityDoesNotHaveComponent("Tint")
			this.tint = null
			mask ^= TINT
			World.onComponentRemoved(&this, Components.TintComponent)
			return &this

		public hasTween():bool
			return (mask & TWEEN) != 0

		public addTween(min:float,max:float,speed:float,repeat:bool,active:bool):Entity* 
			if (mask & TWEEN) != 0 do raise new Exception.EntityAlreadyHasComponent("Tween")
			this.tween = { min, max, speed, repeat, active }
			mask |= TWEEN
			World.onComponentAdded(&this, Components.TweenComponent)
			return &this

		public setTween(min:float,max:float,speed:float,repeat:bool,active:bool):Entity*
			if (mask & TWEEN) == 0 do raise new Exception.EntityDoesNotHaveComponent("Tween")
			this.tween.min = min
			this.tween.max = max
			this.tween.speed = speed
			this.tween.repeat = repeat
			this.tween.active = active
			return &this

		public removeTween():Entity*
			if (mask & TWEEN) == 0 do raise new Exception.EntityDoesNotHaveComponent("Tween")
			this.tween = null
			mask ^= TWEEN
			World.onComponentRemoved(&this, Components.TweenComponent)
			return &this

		public hasVelocity():bool
			return (mask & VELOCITY) != 0

		public addVelocity(x:float,y:float):Entity* 
			if (mask & VELOCITY) != 0 do raise new Exception.EntityAlreadyHasComponent("Velocity")
			this.velocity = { x, y }
			mask |= VELOCITY
			World.onComponentAdded(&this, Components.VelocityComponent)
			return &this

		public setVelocity(x:float,y:float):Entity*
			if (mask & VELOCITY) == 0 do raise new Exception.EntityDoesNotHaveComponent("Velocity")
			this.velocity.x = x
			this.velocity.y = y
			return &this

		public removeVelocity():Entity*
			if (mask & VELOCITY) == 0 do raise new Exception.EntityDoesNotHaveComponent("Velocity")
			this.velocity = null
			mask ^= VELOCITY
			World.onComponentRemoved(&this, Components.VelocityComponent)
			return &this


